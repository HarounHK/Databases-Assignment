--Outer and inner joins including projection and selection

--This query is choosing to show the individuals who have an order of more than one quantity and its not showing null results
select customer_name, item_name, order_id, order_quantity, order_date
from customer
left join "Order" on  customer_id = customer_customer_id
left join item on item_id = item_item_id
where order_quantity > 1;

--This query is choosing to show the individuals who have made an orde past a certain date and its not showing null results
select customer_name, item_name, order_id, order_date
from customer
inner join "Order" on  customer_id = customer_customer_id
inner join item on item_id = item_item_id
where order_date > '2023-04-10';

---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////

--Aggregate Functions

-- Number 1
--Showing the total quantity of each item sold
select item_id, item_name, sum(order_quantity) as Total_Quantity_Sold
from "Order"
join item on item_id = item_item_id
group by item_id, item_name
order by item_id ;

--Number 2
--Showing the total revnue generated by each time and ordering in descending order
select item_name, sum(order_quantity * item_price) as Total_Revenue
from "Order"
join item on item_id = item_item_id
group by item_name
order by Total_Revenue DESC;

--Number 3
--Showing the total revnue generated by all items together
select sum(order_quantity * item_price) as Total_Revenue
from "Order"
join item on item_id = item_item_id;

--Number 4
--Showing the total stock left for by all items
select sum(stock_quantity) as Total_Stock_left
from stock
join item on item_id = item_item_id;

--Number 5
--Showing the average price of the items
select round(avg(item_price), 2) as average_price
from item;

---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////


--set operating queries

--Number 1 (Intersect)
--displaying item id of items that cost over 200 and that have stock of more than 10
select item_id from item 
where item_price > 200
intersect
select item_item_id from stock 
where stock_quantity > 10
order by item_id asc;

--Number 2 (Union)
--displaying item id of items that cost over 200 or that have stock of more than 10
select item_id from item 
where item_price > 200
union
select item_item_id from stock 
where stock_quantity > 10
order by item_id asc;

--Number 3 (Except)
--displaying item id of items that have been over ordered expect the ones that cost below 100
select item_item_id from "Order" 
where order_id > 0
except
select item_id from item 
where item_price < 100
order by item_item_id asc;


---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////

--Sub Queries

--Subquery 1
--Displaying name and role of staff members involved in an order
select staff_name,staff_role 
from staff 
where staff_no in 
( 
	select item_staff_no 
	from "Order"
);

--Subquery 2
--Displaying the items that are of the brand apple along with the price
select brand_name, item_name, item_price
from item join item_info on item_infoid = item_info_item_infoid
where item_info_item_infoid in 
(
    select item_infoid
    from item_info
    where brand_name = 'Apple'
);


---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////
---///////////////////////////////////////////////////////////////////////

--Data manipulating SQL
--Simulating transactions

--Simulating that a customer bought 2 iphone 14's and the iphone14 stock went down by 2
INSERT INTO "Order" (order_id, order_date, order_quantity, customer_customer_id, item_item_id, item_item_info_item_infoid, item_staff_no) 
VALUES
(120000, '2023-05-13', 2, 2, 101, 1001, 19);

update stock 
set stock_quantity = stock_quantity - 2
where item_item_id = 101;

commit;







